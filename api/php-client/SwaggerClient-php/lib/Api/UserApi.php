<?php
/**
 * UserApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Crassus API
 *
 * The Crassus API
 *
 * OpenAPI spec version: 1.0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * UserApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://crassus-php.azurewebsites.net/api');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return UserApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation usersGet
     *
     * Users
     *
     * @return \Swagger\Client\Model\User[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function usersGet()
    {
        list($response) = $this->usersGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation usersGetWithHttpInfo
     *
     * Users
     *
     * @return Array of \Swagger\Client\Model\User[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function usersGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/Users";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\User[]',
                '/Users'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\User[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\User[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation usersIdExerciseDiaryGet
     *
     * Get exercise diary reports
     *
     * @param int $id  (required)
     * @return \Swagger\Client\Model\ExerciseDiary
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function usersIdExerciseDiaryGet($id)
    {
        list($response) = $this->usersIdExerciseDiaryGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation usersIdExerciseDiaryGetWithHttpInfo
     *
     * Get exercise diary reports
     *
     * @param int $id  (required)
     * @return Array of \Swagger\Client\Model\ExerciseDiary, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function usersIdExerciseDiaryGetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling usersIdExerciseDiaryGet');
        }
        // parse inputs
        $resourcePath = "/Users/{id}/Exercise_Diary";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ExerciseDiary',
                '/Users/{id}/Exercise_Diary'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ExerciseDiary', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ExerciseDiary', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation usersIdExerciseDiaryPost
     *
     * Post exercise diary reports
     *
     * @param int $id  (required)
     * @param string $exercises  (required)
     * @return \Swagger\Client\Model\ExerciseDiary
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function usersIdExerciseDiaryPost($id, $exercises)
    {
        list($response) = $this->usersIdExerciseDiaryPostWithHttpInfo($id, $exercises);
        return $response;
    }

    /**
     * Operation usersIdExerciseDiaryPostWithHttpInfo
     *
     * Post exercise diary reports
     *
     * @param int $id  (required)
     * @param string $exercises  (required)
     * @return Array of \Swagger\Client\Model\ExerciseDiary, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function usersIdExerciseDiaryPostWithHttpInfo($id, $exercises)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling usersIdExerciseDiaryPost');
        }
        // verify the required parameter 'exercises' is set
        if ($exercises === null) {
            throw new \InvalidArgumentException('Missing the required parameter $exercises when calling usersIdExerciseDiaryPost');
        }
        // parse inputs
        $resourcePath = "/Users/{id}/Exercise_Diary";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($exercises !== null) {
            $formParams['exercises'] = $this->apiClient->getSerializer()->toFormValue($exercises);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ExerciseDiary',
                '/Users/{id}/Exercise_Diary'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ExerciseDiary', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ExerciseDiary', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ExerciseDiary', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation usersIdFoodDiaryGet
     *
     * Get food diary reports
     *
     * @param int $id  (required)
     * @return \Swagger\Client\Model\FoodDiary
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function usersIdFoodDiaryGet($id)
    {
        list($response) = $this->usersIdFoodDiaryGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation usersIdFoodDiaryGetWithHttpInfo
     *
     * Get food diary reports
     *
     * @param int $id  (required)
     * @return Array of \Swagger\Client\Model\FoodDiary, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function usersIdFoodDiaryGetWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling usersIdFoodDiaryGet');
        }
        // parse inputs
        $resourcePath = "/Users/{id}/Food_Diary";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\FoodDiary',
                '/Users/{id}/Food_Diary'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\FoodDiary', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FoodDiary', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation usersIdFoodDiaryPost
     *
     * Post food diary reports
     *
     * @param int $id  (required)
     * @param \DateTime $post_date  (required)
     * @param int $number_week  (required)
     * @param string $breakfast  (optional)
     * @param string $lunch  (optional)
     * @param string $dinner  (optional)
     * @param string $snacks  (optional)
     * @return \Swagger\Client\Model\FoodDiary
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function usersIdFoodDiaryPost($id, $post_date, $number_week, $breakfast = null, $lunch = null, $dinner = null, $snacks = null)
    {
        list($response) = $this->usersIdFoodDiaryPostWithHttpInfo($id, $post_date, $number_week, $breakfast, $lunch, $dinner, $snacks);
        return $response;
    }

    /**
     * Operation usersIdFoodDiaryPostWithHttpInfo
     *
     * Post food diary reports
     *
     * @param int $id  (required)
     * @param \DateTime $post_date  (required)
     * @param int $number_week  (required)
     * @param string $breakfast  (optional)
     * @param string $lunch  (optional)
     * @param string $dinner  (optional)
     * @param string $snacks  (optional)
     * @return Array of \Swagger\Client\Model\FoodDiary, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function usersIdFoodDiaryPostWithHttpInfo($id, $post_date, $number_week, $breakfast = null, $lunch = null, $dinner = null, $snacks = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling usersIdFoodDiaryPost');
        }
        // verify the required parameter 'post_date' is set
        if ($post_date === null) {
            throw new \InvalidArgumentException('Missing the required parameter $post_date when calling usersIdFoodDiaryPost');
        }
        // verify the required parameter 'number_week' is set
        if ($number_week === null) {
            throw new \InvalidArgumentException('Missing the required parameter $number_week when calling usersIdFoodDiaryPost');
        }
        // parse inputs
        $resourcePath = "/Users/{id}/Food_Diary";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($breakfast !== null) {
            $formParams['breakfast'] = $this->apiClient->getSerializer()->toFormValue($breakfast);
        }
        // form params
        if ($lunch !== null) {
            $formParams['lunch'] = $this->apiClient->getSerializer()->toFormValue($lunch);
        }
        // form params
        if ($dinner !== null) {
            $formParams['dinner'] = $this->apiClient->getSerializer()->toFormValue($dinner);
        }
        // form params
        if ($snacks !== null) {
            $formParams['snacks'] = $this->apiClient->getSerializer()->toFormValue($snacks);
        }
        // form params
        if ($post_date !== null) {
            $formParams['post_date'] = $this->apiClient->getSerializer()->toFormValue($post_date);
        }
        // form params
        if ($number_week !== null) {
            $formParams['number_week'] = $this->apiClient->getSerializer()->toFormValue($number_week);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\FoodDiary',
                '/Users/{id}/Food_Diary'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\FoodDiary', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FoodDiary', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FoodDiary', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation usersIdGet
     *
     * Specific user
     *
     * @param int $id user id (required)
     * @param string $x_authtoken  (optional)
     * @return \Swagger\Client\Model\User
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function usersIdGet($id, $x_authtoken = null)
    {
        list($response) = $this->usersIdGetWithHttpInfo($id, $x_authtoken);
        return $response;
    }

    /**
     * Operation usersIdGetWithHttpInfo
     *
     * Specific user
     *
     * @param int $id user id (required)
     * @param string $x_authtoken  (optional)
     * @return Array of \Swagger\Client\Model\User, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function usersIdGetWithHttpInfo($id, $x_authtoken = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling usersIdGet');
        }
        // parse inputs
        $resourcePath = "/Users/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_authtoken !== null) {
            $headerParams['x-authtoken'] = $this->apiClient->getSerializer()->toHeaderValue($x_authtoken);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\User',
                '/Users/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\User', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\User', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation usersIdProfileGet
     *
     * Get profile of a specific user
     *
     * @param int $id  (required)
     * @param double $length  (optional)
     * @param double $weight  (optional)
     * @param \DateTime $date_of_birth  (optional)
     * @param string $gender  (optional)
     * @return \Swagger\Client\Model\Profile
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function usersIdProfileGet($id, $length = null, $weight = null, $date_of_birth = null, $gender = null)
    {
        list($response) = $this->usersIdProfileGetWithHttpInfo($id, $length, $weight, $date_of_birth, $gender);
        return $response;
    }

    /**
     * Operation usersIdProfileGetWithHttpInfo
     *
     * Get profile of a specific user
     *
     * @param int $id  (required)
     * @param double $length  (optional)
     * @param double $weight  (optional)
     * @param \DateTime $date_of_birth  (optional)
     * @param string $gender  (optional)
     * @return Array of \Swagger\Client\Model\Profile, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function usersIdProfileGetWithHttpInfo($id, $length = null, $weight = null, $date_of_birth = null, $gender = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling usersIdProfileGet');
        }
        // parse inputs
        $resourcePath = "/Users/{id}/Profile";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($length !== null) {
            $formParams['length'] = $this->apiClient->getSerializer()->toFormValue($length);
        }
        // form params
        if ($weight !== null) {
            $formParams['weight'] = $this->apiClient->getSerializer()->toFormValue($weight);
        }
        // form params
        if ($date_of_birth !== null) {
            $formParams['date_of_birth'] = $this->apiClient->getSerializer()->toFormValue($date_of_birth);
        }
        // form params
        if ($gender !== null) {
            $formParams['gender'] = $this->apiClient->getSerializer()->toFormValue($gender);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Profile',
                '/Users/{id}/Profile'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Profile', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Profile', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation usersIdProfilePut
     *
     * Update profile information
     *
     * @param int $id  (required)
     * @param double $length  (optional)
     * @param double $weight  (optional)
     * @param \DateTime $date_of_birth  (optional)
     * @param string $gender  (optional)
     * @return \Swagger\Client\Model\Profile
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function usersIdProfilePut($id, $length = null, $weight = null, $date_of_birth = null, $gender = null)
    {
        list($response) = $this->usersIdProfilePutWithHttpInfo($id, $length, $weight, $date_of_birth, $gender);
        return $response;
    }

    /**
     * Operation usersIdProfilePutWithHttpInfo
     *
     * Update profile information
     *
     * @param int $id  (required)
     * @param double $length  (optional)
     * @param double $weight  (optional)
     * @param \DateTime $date_of_birth  (optional)
     * @param string $gender  (optional)
     * @return Array of \Swagger\Client\Model\Profile, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function usersIdProfilePutWithHttpInfo($id, $length = null, $weight = null, $date_of_birth = null, $gender = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling usersIdProfilePut');
        }
        // parse inputs
        $resourcePath = "/Users/{id}/Profile";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($length !== null) {
            $formParams['length'] = $this->apiClient->getSerializer()->toFormValue($length);
        }
        // form params
        if ($weight !== null) {
            $formParams['weight'] = $this->apiClient->getSerializer()->toFormValue($weight);
        }
        // form params
        if ($date_of_birth !== null) {
            $formParams['date_of_birth'] = $this->apiClient->getSerializer()->toFormValue($date_of_birth);
        }
        // form params
        if ($gender !== null) {
            $formParams['gender'] = $this->apiClient->getSerializer()->toFormValue($gender);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Profile',
                '/Users/{id}/Profile'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Profile', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Profile', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation usersIdPut
     *
     * User adjustment
     *
     * @param int $id user id (required)
     * @param string $x_authtoken  (optional)
     * @return \Swagger\Client\Model\User[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function usersIdPut($id, $x_authtoken = null)
    {
        list($response) = $this->usersIdPutWithHttpInfo($id, $x_authtoken);
        return $response;
    }

    /**
     * Operation usersIdPutWithHttpInfo
     *
     * User adjustment
     *
     * @param int $id user id (required)
     * @param string $x_authtoken  (optional)
     * @return Array of \Swagger\Client\Model\User[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function usersIdPutWithHttpInfo($id, $x_authtoken = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling usersIdPut');
        }
        // parse inputs
        $resourcePath = "/Users/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($x_authtoken !== null) {
            $headerParams['x-authtoken'] = $this->apiClient->getSerializer()->toHeaderValue($x_authtoken);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\User[]',
                '/Users/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\User[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\User[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation usersIdScoresGet
     *
     * Get scores
     *
     * @param int $id  (required)
     * @param int $number_week  (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function usersIdScoresGet($id, $number_week)
    {
        list($response) = $this->usersIdScoresGetWithHttpInfo($id, $number_week);
        return $response;
    }

    /**
     * Operation usersIdScoresGetWithHttpInfo
     *
     * Get scores
     *
     * @param int $id  (required)
     * @param int $number_week  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function usersIdScoresGetWithHttpInfo($id, $number_week)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling usersIdScoresGet');
        }
        // verify the required parameter 'number_week' is set
        if ($number_week === null) {
            throw new \InvalidArgumentException('Missing the required parameter $number_week when calling usersIdScoresGet');
        }
        // parse inputs
        $resourcePath = "/Users/{id}/Scores";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($number_week !== null) {
            $formParams['number_week'] = $this->apiClient->getSerializer()->toFormValue($number_week);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Users/{id}/Scores'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation usersIdScoresPost
     *
     * Post score
     *
     * @param int $id  (required)
     * @param int $number_week  (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function usersIdScoresPost($id, $number_week)
    {
        list($response) = $this->usersIdScoresPostWithHttpInfo($id, $number_week);
        return $response;
    }

    /**
     * Operation usersIdScoresPostWithHttpInfo
     *
     * Post score
     *
     * @param int $id  (required)
     * @param int $number_week  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function usersIdScoresPostWithHttpInfo($id, $number_week)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling usersIdScoresPost');
        }
        // verify the required parameter 'number_week' is set
        if ($number_week === null) {
            throw new \InvalidArgumentException('Missing the required parameter $number_week when calling usersIdScoresPost');
        }
        // parse inputs
        $resourcePath = "/Users/{id}/Scores";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($number_week !== null) {
            $formParams['number_week'] = $this->apiClient->getSerializer()->toFormValue($number_week);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Users/{id}/Scores'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation usersPost
     *
     * User addition
     *
     * @return \Swagger\Client\Model\User[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function usersPost()
    {
        list($response) = $this->usersPostWithHttpInfo();
        return $response;
    }

    /**
     * Operation usersPostWithHttpInfo
     *
     * User addition
     *
     * @return Array of \Swagger\Client\Model\User[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function usersPostWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/Users";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\User[]',
                '/Users'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\User[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\User[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
